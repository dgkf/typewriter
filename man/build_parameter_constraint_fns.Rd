% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/type_parameters.R
\name{build_parameter_constraint_fns}
\alias{build_parameter_constraint_fns}
\title{Build type parameter constraints}
\usage{
build_parameter_constraint_fns(exprs)
}
\arguments{
\item{exprs}{A list of language objects representing type parameters and type
parameter constraints}
}
\value{
A list with named fields \code{constrain_all} and \code{constrain_each}
representing two classes of constraints. \code{constrain_all} constraints expect
that all observed values have identical results. \verb{constrain each} constraints
expect that each observed value satisfies the constraint predicate.
}
\description{
Provided a list of type parameters, build functions which can be applied over
runtime observed parameter values to test for constraint satisfaction.
}
\details{
Type constraints are returned as one of two classes of functions,
\code{constrain_all} and \code{constrain_each}. Names produce \code{constrain_all}
functions, which expect that all observed type parameters are identical,
whereas expressions produce \code{constrain_each} functions, which expect that all
combinations of observed type parameters satisfy the constraint predicate.
}
\examples{
build_parameter_constraint_fns(list(quote(T), quote(N), quote(N > 3)))

}
